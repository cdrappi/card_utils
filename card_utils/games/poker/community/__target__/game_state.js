'use strict';var logging={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,
filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{PokerGameState}from"./card_utils.games.poker.game_state.js";import{Action}from"./card_utils.games.poker.action.js";import{Dict,List}from"./typing.js";import*as __module_logging__ from"./logging.js";__nest__(logging,"",__module_logging__);
var __name__="__main__";export var logger=logging.getLogger(__name__);export var CommunityGameState=__class__("CommunityGameState",[PokerGameState],{__module__:__name__,py_name:"abstract_community",num_hole_cards:0,showdown_street:4,street_names:dict({0:"PRE-FLOP",1:"FLOP",2:"TURN",3:"RIVER",4:"SHOWDOWN"}),get __init__(){return __get__(this,function(self,num_players,deck,starting_stacks,hands,boards,ante,blinds,stacks,action,street,actions,last_actions,pot_balances){if(typeof boards=="undefined"||
boards!=null&&boards.hasOwnProperty("__kwargtrans__"))var boards=null;if(typeof ante=="undefined"||ante!=null&&ante.hasOwnProperty("__kwargtrans__"))var ante=0;if(typeof blinds=="undefined"||blinds!=null&&blinds.hasOwnProperty("__kwargtrans__"))var blinds=null;if(typeof stacks=="undefined"||stacks!=null&&stacks.hasOwnProperty("__kwargtrans__"))var stacks=null;if(typeof action=="undefined"||action!=null&&action.hasOwnProperty("__kwargtrans__"))var action=null;if(typeof street=="undefined"||street!=
null&&street.hasOwnProperty("__kwargtrans__"))var street=0;if(typeof actions=="undefined"||actions!=null&&actions.hasOwnProperty("__kwargtrans__"))var actions=null;if(typeof last_actions=="undefined"||last_actions!=null&&last_actions.hasOwnProperty("__kwargtrans__"))var last_actions=null;if(typeof pot_balances=="undefined"||pot_balances!=null&&pot_balances.hasOwnProperty("__kwargtrans__"))var pot_balances=null;if(boards===null)var boards=[[]];if(len(boards)!=1){var __except0__=ValueError("{} is a community-card game, so it must only have one board".format(self.py_name));
__except0__.__cause__=null;throw __except0__;}for(var hand of hands)if(len(hand)!=self.num_hole_cards){var __except0__=ValueError("Hands in {} must have exactly {} cards. You provided {}\nPerhaps you need to override the num_hole_cards class variable in {}".format(self.py_name,self.num_hole_cards,len(hand),self.__class__.__name__));__except0__.__cause__=null;throw __except0__;}if(num_players==2&&blinds[0]<blinds[1]){logger.warning("Flipping the blinds for 2-handed play. To suppress this warning, you should flip the order of blinds in heads up play. e.g. input the blinds as [2, 1] rather than [1, 2] because the dealer pays the small blind and acts second on all later streets".format());
var blinds=[blinds[1],blinds[0]]}__super__(CommunityGameState,"__init__")(self,__kwargtrans__({num_players:num_players,deck:deck,starting_stacks:starting_stacks,hands:hands,boards:boards,ante:ante,blinds:blinds,stacks:stacks,action:action,street:street,actions:actions,last_actions:last_actions,pot_balances:pot_balances}))})},get _get_valid_actions(){return __get__(this,function(self){var valid_action_set=super().valid_actions;if(self.is_acting_last_preflop())valid_action_set.add(Action.action_raise);
return valid_action_set})},get _get_big_blind_player(){return __get__(this,function(self){return self.num_players==2?0:1})},get _get_utg_preflop(){return __get__(this,function(self){return self.num_players==2?1:2})},get is_acting_last_preflop(){return __get__(this,function(self){return self.street==0&&self.action==self.big_blind_player})},get order_hands(){return __get__(this,function(self,players){var __except0__=NotImplementedError("All CommunityGameState objects must implement order_hands to decide who wins at showdown".format());
__except0__.__cause__=null;throw __except0__;})},get extract_blinds(){return __get__(this,function(self){for(var [player,blind]of enumerate(self.blinds)){var amount=min(self.stacks[player],blind);self.put_money_in_pot(player,amount)}})},get get_starting_action(){return __get__(this,function(self){if(self.street==0)return self.utg_preflop;else return py_next(function(){var __accu0__=[];for(var p=0;p<self.num_players;p++)if(!self.cannot_act(p))__accu0__.append(p);return py_iter(__accu0__)}())})},get move_street(){return __get__(this,
function(self){__super__(CommunityGameState,"move_street")(self);if(self.street==1&&!self.flop)self.deal_cards_to_board(3);else if(self.street==2&&!self.turn)self.deal_cards_to_board(1);else if(self.street==3&&!self.river)self.deal_cards_to_board(1)})},get deal_cards_to_board(){return __get__(this,function(self,n){var cards=self.deck.__getslice__(0,n,1);self.deck=self.deck.__getslice__(n,null,1);self.boards[0].extend(cards)})},get _get_board(){return __get__(this,function(self){return self.boards[0]})},
get _get_flop(){return __get__(this,function(self){return self.board.__getslice__(0,3,1)})},get _get_turn(){return __get__(this,function(self){return self.board.__getslice__(3,4,1)})},get _get_river(){return __get__(this,function(self){return self.board.__getslice__(4,5,1)})},get player_name(){return __get__(this,function(self,player_index){if(!(0<=player_index&&player_index<self.num_players)){var __except0__=ValueError("CommunityGameState.player_name: invalid player_index arg: {}\nMust be 0 <= player_index < num_players".format(player_index));
__except0__.__cause__=null;throw __except0__;}if(self.num_players==2)return player_index==1?"BUTTON":"BIG BLIND";if(player_index==0)return"SMALL BLIND";else if(player_index==1)return"BIG BLIND";else if(player_index==self.num_players-1)return"BUTTON";else if(player_index==self.num_players-2)return"CUTOFF";else if(player_index==self.num_players-3)return"HIJACK";else{var utg_str=player_index-2?"+{}".format(player_index-2):"";return"{}-OFF / UTG{}".format(self.num_players-player_index-1,utg_str)}})},
get state_dict(){return __get__(this,function(self,player){return dict({"player":player,"num_players":self.num_players,"starting_stacks":self.starting_stacks,"hand":self.hands[player],"board":self.board,"ante":self.ante,"blinds":self.blinds,"action":self.action,"street":self.street,"actions":function(){var __accu0__=[];for(var action of self.actions)__accu0__.append(action.to_dict());return __accu0__}(),"last_actions":self.last_actions,"pot_balances":self.pot.balances})})}});Object.defineProperty(CommunityGameState,
"river",property.call(CommunityGameState,CommunityGameState._get_river));Object.defineProperty(CommunityGameState,"turn",property.call(CommunityGameState,CommunityGameState._get_turn));Object.defineProperty(CommunityGameState,"flop",property.call(CommunityGameState,CommunityGameState._get_flop));Object.defineProperty(CommunityGameState,"board",property.call(CommunityGameState,CommunityGameState._get_board));Object.defineProperty(CommunityGameState,"utg_preflop",property.call(CommunityGameState,CommunityGameState._get_utg_preflop));
Object.defineProperty(CommunityGameState,"big_blind_player",property.call(CommunityGameState,CommunityGameState._get_big_blind_player));Object.defineProperty(CommunityGameState,"valid_actions",property.call(CommunityGameState,CommunityGameState._get_valid_actions));

//# sourceMappingURL=game_state.map