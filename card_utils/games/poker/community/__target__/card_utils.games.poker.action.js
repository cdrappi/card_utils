'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,
getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";var __name__="card_utils.games.poker.action";export var Action=__class__("Action",[object],{__module__:__name__,action_check:"CHECK",action_bet:"BET",action_fold:"FOLD",action_call:"CALL",action_raise:"RAISE",action_draw:"DRAW",zero_to_call:new set([action_bet,
action_check]),nonzero_to_call:new set([action_fold,action_call,action_raise]),zeros:new set([action_fold,action_check,action_draw]),aggressions:new set([action_bet,action_raise]),closes:new set([action_fold,action_call]),passes:new set([action_check,action_fold]),wagers:new set([action_call,aggressions]),actions:new set([zeros,wagers]),get __init__(){return __get__(this,function(self,player,action,amount){if(!__in__(action,self.actions)){var __except0__=py_TypeError("Action: Invalid action {}".format(action));
__except0__.__cause__=null;throw __except0__;}if(amount<0){var __except0__=ValueError("Action: amount must be >= 0, received {}".format(amount));__except0__.__cause__=null;throw __except0__;}if(__in__(action,self.zeros)){if(amount!=0){var __except0__=ValueError("Action: amount must be 0 for actions of type {}".format(action));__except0__.__cause__=null;throw __except0__;}}else if(__in__(action,self.wagers))if(amount<=0){var __except0__=ValueError("Action: amount must be > 0 for actions of type {}".format(action));
__except0__.__cause__=null;throw __except0__;}self.player=player;self.action=action;self.amount=amount;self.state=state})},get to_dict(){return __get__(this,function(self){return dict({"player":self.player,"action":self.action,"amount":self.amount})})}});

//# sourceMappingURL=card_utils.games.poker.action.map