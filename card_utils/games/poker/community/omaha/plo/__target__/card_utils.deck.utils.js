'use strict';var random={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,
filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{deck}from"./card_utils.js";import*as __module_random__ from"./random.js";__nest__(random,"",__module_random__);var __name__="card_utils.deck.utils";export var random_deck=function(){var deck_copy=function(){var __accu0__=[];for(var c of deck.cards)__accu0__.append(c);
return __accu0__}();random.shuffle(deck_copy);return deck_copy};export var rank_partition=function(cards){var rank_to_suits=dict({});for(var [rank,suit]of cards){if(!__in__(rank,rank_to_suits))rank_to_suits[rank]=[];rank_to_suits[rank].append(suit)}return rank_to_suits};export var suit_partition=function(cards){var suit_to_ranks=dict({});for(var [rank,suit]of cards){if(!__in__(suit,suit_to_ranks))suit_to_ranks[suit]=[];suit_to_ranks[suit].append(rank)}return suit_to_ranks};export var ranks_to_sorted_values=
function(ranks,aces_high,aces_low,distinct,reverse){if(typeof distinct=="undefined"||distinct!=null&&distinct.hasOwnProperty("__kwargtrans__"))var distinct=false;if(typeof reverse=="undefined"||reverse!=null&&reverse.hasOwnProperty("__kwargtrans__"))var reverse=false;if(!ranks)return[];if(!(aces_high||aces_low)){var __except0__=ValueError("Call to ranks_to_sorted_values: Aces cannot be neither high nor low! Makes no sense");__except0__.__cause__=null;throw __except0__;}if(distinct)var ranks=set(ranks);
var py_values=[];for(var rank of ranks){var value=deck.ace_low_rank_to_value[rank];if(value==deck.ace_low_rank_to_value["A"]){if(aces_low)py_values.append(deck.ace_low_rank_to_value["A"]);if(aces_high)py_values.append(deck.ace_high_rank_to_value["A"])}else py_values.append(value)}return sorted(py_values,__kwargtrans__({reverse:reverse}))};

//# sourceMappingURL=card_utils.deck.utils.map